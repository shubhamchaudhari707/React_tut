{"ast":null,"code":"var _jsxFileName = \"D:\\\\Node_Express_Js\\\\React_JS\\\\reacttut\\\\tutpratise\\\\src\\\\if.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst slotM = (x, y, z) => {\n  if (x === y && y === z) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", x, \" \", y, \" \", z, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"All same \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", x, \" \", y, \" \", z, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"All are not same \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n};\n\nexport { slotM };","map":{"version":3,"sources":["D:/Node_Express_Js/React_JS/reacttut/tutpratise/src/if.jsx"],"names":["slotM","x","y","z"],"mappings":";;;;AAAA,MAAMA,KAAK,GAAC,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAW;AAInB,MAAKF,CAAC,KAAGC,CAAL,IAAYA,CAAC,KAAGC,CAApB,EAAwB;AACpB,wBACI;AAAA,6BACA;AAAA,gCACI;AAAA,0BAAMF,CAAN,OAAUC,CAAV,OAAcC,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,qBADJ;AASH,GAVD,MAWI;AACA,wBACI;AAAA,6BACA;AAAA,gCACA;AAAA,0BAAMF,CAAN,OAAUC,CAAV,OAAcC,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,qBADJ;AAQH;AACJ,CAzBD;;AA4BA,SAASH,KAAT","sourcesContent":["const slotM=(x, y, z)=>{\r\n\r\n\r\n\r\n    if ((x===y) && (y===z)) {\r\n        return(\r\n            <>\r\n            <div>\r\n                <h1> {x} {y} {z} </h1>\r\n                <h1>All same </h1>\r\n                <hr />\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <>\r\n            <div>\r\n            <h1> {x} {y} {z} </h1>\r\n                <h1>All are not same </h1>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport  {slotM}\r\n\r\n"]},"metadata":{},"sourceType":"module"}